import os
from dotenv import load_dotenv
load_dotenv()

import streamlit as st
from openai import OpenAI
from parse_hh import get_html, extract_vacancy_data, extract_resume_data

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if "launches_left" not in st.session_state:
    st.session_state.launches_left = 5

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ PIN
if st.session_state.launches_left <= 0:
    st.warning("‚õî –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –í–≤–µ–¥–∏—Ç–µ PIN –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")

    pin_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", type="password")
    correct_pin = os.getenv("UNLOCK_PIN")  # PIN —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö Streamlit

    if pin_input == correct_pin:
        st.session_state.launches_left = 5
        st.success("‚úÖ –î–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –£ –≤–∞—Å —Å–Ω–æ–≤–∞ 5 –ø–æ–ø—ã—Ç–æ–∫.")
    else:
        st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI-–∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

SYSTEM_PROMPT = """
–ü—Ä–æ—Å–∫–æ—Ä—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.
–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ—è—Å–Ω—è—Ç—å –æ—Ü–µ–Ω–∫—É.
–û—Ç–¥–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∑—é–º–µ (–ø–æ–Ω—è—Ç–Ω–æ –ª–∏, —Å –∫–∞–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç –∏ –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∏—Ö —Ä–µ—à–∞–ª?). –≠—Ç–∞ –æ—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ - –Ω–∞–º –≤–∞–∂–Ω–æ –Ω–∞–Ω–∏–º–∞—Ç—å —Ç–∞–∫–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É
–ü–æ—Ç–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç 1 –¥–æ 10.
""".strip()

def request_gpt(system_prompt, user_prompt):
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
        max_tokens=1000,
        temperature=0,
    )
    return response.choices[0].message.content

# UI
st.title('CV Scoring App')

# üí° –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å
st.info(f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {st.session_state.launches_left}")

job_url = st.text_area('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é')
resume_url = st.text_area('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ')

if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"):
    with st.spinner("–ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT..."):
        try:
            st.session_state.launches_left -= 1

            job_html = get_html(job_url).text
            resume_html = get_html(resume_url).text

            job_text = extract_vacancy_data(job_html)
            resume_text = extract_resume_data(resume_html)

            prompt = f"# –í–ê–ö–ê–ù–°–ò–Ø\n{job_text}\n\n# –†–ï–ó–Æ–ú–ï\n{resume_text}"
            response = request_gpt(SYSTEM_PROMPT, prompt)

            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
            st.markdown(response)
        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
